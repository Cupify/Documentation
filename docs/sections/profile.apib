## Profile [/users/{userId}]

+ Parameters

    + userId: h1u4Rye9 (string, required) - A unique user identifier.<br />
      Use `me` to interact with the current user.

### Read [GET]
Add more information about this request.

+ Request Example (application/json)

    + Headers

            Authorization: sdfsfsdfsfdsfsfsdfdsfs

+ Response 200 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 200,
              "user": {
                "username": "cupify",
                "avatar": "https://cdn.cupify.me/avatar/h1u4Rye9.webp",
                "lastSeen": 1510795171
              }
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "integer"
                    },
                    "avatar": {
                      "type": "integer"
                    },
                    "lastSeen": {
                      "type": "integer",
                      "description": "Unix timestamp of user's last activity."
                    }
                  },
                  "required": ["username", "avatar", "lastSeen"]
                }
              },
              "required": ["status", "user"]
            }

+ Response 403 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 401,
              "error": "The provided credentials are not valid."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }

+ Response 404 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 401,
              "error": "The requested user could not be found."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }


### Update [PUT]
Profiles may only be updated by their owners.

::: warning
# Attempting to update a different user's profile will be rejected with a `403` response.
:::

+ Request Example

    + Headers

            Authorization: fsdfsfsfsdfsdfsdfd

    + Body

            {
              "email": "hello@cupify.me",
              "password": "54321",
              "gender": "male",
              "dob": 315964800,
              "status": "single",
              "about": "Hello, I am a musician."
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "agender",
                    "intergender",
                    "female",
                    "male",
                    "none",
                    "non-binary",
                    "neutrois",
                    "transgender-man",
                    "transgender-woman",
                    "transsexual"
                  ]
                },
                "dob": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "about": {
                  "type": "string"
                }
              }
            }

+ Response 200 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 200
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                }
              },
              "required": ["status"]
            }

+ Response 403 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 403,
              "error": "The provided authentication token is not valid."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }

+ Response 409 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 409,
              "error": "The provided email address is already in use."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }

## Location [/users/{userId}/location]

+ Parameters

    + userId: h1u4Rye9 (string, required) - A unique user identifier.<br />
    Use `me` to interact with the current user.

### Save location [POST]
Storing locations is only available to the current user.

::: warning
# Attempting to store a location for a different user will be rejected with a `403` response.
:::

+ Request Example (application/json)

    + Headers

            Authorization: sdfsfsdfsfdsfsfsdfdsfs

    + Body

            {
              "lat": 37.77493,
              "lon": -122.419416
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number"
                },
                "lon": {
                  "type": "number"
                }
              },
              "required": ["lat", "lon"]
            }

+ Response 200 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 200
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                }
              },
              "required": ["status"]
            }

+ Response 403 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 403,
              "error": "The provided authentication token is not valid."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }

+ Response 409 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 409,
              "error": "The provided coordinates are not valid."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }


## Report [/users/{userId}/report]

+ Parameters

    + userId: h1u4Rye9 (string, required) - A unique user identifier.

### Report [POST]

+ Request Example (application/json)

    + Headers

            Authorization: sdfsfsdfsfdsfsfsdfdsfs

    + Body

            {
              "reason": "spam"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "enum": ["spam", "offensive"]
                }
              },
              "required": ["reason"]
            }

+ Response 200 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 200
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                }
              },
              "required": ["status"]
            }

+ Response 403 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 403,
              "error": "The provided authentication token is not valid."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }

+ Response 404 (application/json)

      + Headers

            Content-Transfer-Encoding: application/gzip

      + Body

            {
              "status": 401,
              "error": "The requested user could not be found."
            }

      + Schema

            {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": ["status", "error"]
            }
